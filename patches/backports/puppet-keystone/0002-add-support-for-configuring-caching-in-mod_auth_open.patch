From 6200cb170a34f1e02d9930f11bedbaaabd558b62 Mon Sep 17 00:00:00 2001
From: Lars Kellogg-Stedman <lars@redhat.com>
Date: Thu, 21 Jun 2018 15:25:05 -0400
Subject: [PATCH 2/2] add support for configuring caching in mod_auth_openidc

Allow operator to configure cache type and parameters for
mod_auth_openidc. A shared cache (like memcache or redis) is necessary
to support multiple endpoints without sticky session.

Change-Id: I9ff976854b93cdf9ca3175d1fd39c2b268b9f7fa
(cherry picked from commit 73cfff4134df836582ed63a866d87c393e16db52)
---
 manifests/federation/openidc.pp | 66 +++++++++++++++++++++++++++------
 templates/openidc.conf.erb      | 27 +++++++++++++-
 2 files changed, 80 insertions(+), 13 deletions(-)

diff --git a/manifests/federation/openidc.pp b/manifests/federation/openidc.pp
index cd2100f..0108346 100644
--- a/manifests/federation/openidc.pp
+++ b/manifests/federation/openidc.pp
@@ -28,6 +28,39 @@
 #  (Optional) String value.
 #  Defaults to 'id_token'
 #
+# [*openidc_cache_type*]
+#    (Optional) mod_auth_openidc cache type.  Can be any cache type
+#    supported by mod_auth_openidc (shm, file, memcache, redis).
+#    Defaults to undef.
+#
+# [*openidc_cache_shm_max*]
+#    (Optional) The maximum number of name/value pair entries that can
+#    be cached when using the 'shm' cache type. Defaults to undef.
+#
+# [*openidc_cache_shm_entry_size*]
+#    (Optional) The maximum size for a single shm cache entry in bytes
+#    with a minimum of 8464 bytes. Defaults to undef.
+#
+# [*openidc_cache_dir*]
+#    (Optional) # Directory that holds cache files; must be writable
+#    for the Apache process/user. Defaults to undef.
+#
+# [*openidc_cache_clean_interval*]
+#    (Optional) # Cache file clean interval in seconds (only triggered
+#    on writes). Defaults to undef.
+#
+# [*memcached_servers*]
+#    (Optional) A list of memcache servers. Defaults to undef.
+#
+# [*redis_server*]
+#    (Optional) Specifies the Redis server used for caching as
+#    <hostname>[:<port>]. Defaults to undef.
+#
+# [*redis_password*]
+#    (Optional) Password to be used if the Redis server requires
+#    authentication. When not specified, no authentication is
+#    performed. Defaults to undef.
+#
 # [*admin_port*]
 #  A boolean value to ensure that you want to configure openidc Federation
 #  using Keystone VirtualHost on port 35357.
@@ -49,15 +82,15 @@
 #  (Optional) Defaults to 331.
 #
 # [*package_ensure*]
-#   (optional) Desired ensure state of packages.
+#   (Optional) Desired ensure state of packages.
 #   accepts latest or specific versions.
 #   Defaults to present.
 #
 # [*keystone_public_url*]
-#   (optional) URL to keystone public endpoint.
+#   (Optional) URL to keystone public endpoint.
 #
 # [*keystone_admin_url*]
-#    (optional) URL to keystone admin endpoint.
+#    (Optional) URL to keystone admin endpoint.
 #
 # === DEPRECATED
 #
@@ -69,17 +102,25 @@ class keystone::federation::openidc (
   $openidc_provider_metadata_url,
   $openidc_client_id,
   $openidc_client_secret,
-  $openidc_crypto_passphrase   = 'openstack',
-  $openidc_response_type       = 'id_token',
-  $admin_port                  = false,
-  $main_port                   = true,
-  $template_order              = 331,
-  $package_ensure              = present,
-  $keystone_public_url         = undef,
-  $keystone_admin_url          = undef,
+  $openidc_crypto_passphrase    = 'openstack',
+  $openidc_response_type        = 'id_token',
+  $openidc_cache_type           = undef,
+  $openidc_cache_shm_max        = undef,
+  $openidc_cache_shm_entry_size = undef,
+  $openidc_cache_dir            = undef,
+  $openidc_cache_clean_interval = undef,
+  $memcached_servers            = undef,
+  $redis_server                 = undef,
+  $redis_password               = undef,
+  $admin_port                   = false,
+  $main_port                    = true,
+  $template_order               = 331,
+  $package_ensure               = present,
+  $keystone_public_url          = undef,
+  $keystone_admin_url           = undef,
 
   # DEPRECATED
-  $module_plugin               = undef,
+  $module_plugin                = undef,
 ) {
 
   include ::apache
@@ -88,6 +129,7 @@ class keystone::federation::openidc (
 
   $_keystone_public_url = pick($keystone_public_url, $::keystone::public_endpoint)
   $_keystone_admin_url = pick($keystone_admin_url, $::keystone::admin_endpoint)
+  $_memcached_servers = join(any2array($memcached_servers), ' ')
 
   # Note: if puppet-apache modify these values, this needs to be updated
   if $template_order <= 330 or $template_order >= 999 {
diff --git a/templates/openidc.conf.erb b/templates/openidc.conf.erb
index d50600c..0ed3a08 100644
--- a/templates/openidc.conf.erb
+++ b/templates/openidc.conf.erb
@@ -7,6 +7,31 @@
   OIDCClientSecret "<%= scope['keystone::federation::openidc::openidc_client_secret']-%>"
   OIDCCryptoPassphrase "<%= scope['keystone::federation::openidc::openidc_crypto_passphrase']-%>"
 
+<%- if scope['::keystone::federation::openidc::openidc_cache_type'] != nil -%>
+  OIDCCacheType <%= scope['::keystone::federation::openidc::openidc_cache_type'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::openidc_cache_shm_max'] != nil -%>
+  OIDCCacheShmMax scope['::keystone::federation::openidc::openidc_cache_shm_max'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::openidc_cache_shm_entry_size'] != nil -%>
+  OIDCCacheShmEntrySize scope['::keystone::federation::openidc::openidc_cache_shm_entry_size'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::openidc_cache_dir'] != nil -%>
+  OIDCCacheDir scope['::keystone::federation::openidc::openidc_cache_dir'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::openidc_cache_clean_interval'] != nil -%>
+  OIDCCacheFileCleanInterval scope['::keystone::federation::openidc::openidc_cache_clean_interval'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::_memcached_servers'] -%>
+  OIDCMemCacheServers "<%= scope['::keystone::federation::openidc::_memcached_servers'] %>"
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::redis_server'] != nil -%>
+  OIDCRedisCacheServer scope['::keystone::federation::openidc::redis_server'] %>
+<%- end -%>
+<%- if scope['::keystone::federation::openidc::redis_password'] != nil -%>
+  OIDCRedisCachecPassword scope['::keystone::federation::openidc::redis_password'] %>
+<%- end -%>
+
   # The following directives are required to support openid from the command
   # line
   <Location ~ "/v3/OS-FEDERATION/identity_providers/<%= scope['keystone::federation::openid::idp_name']-%>/protocols/openid/auth">
@@ -19,7 +44,7 @@
   OIDCRedirectURI "<%= @keystone_endpoint-%>/v3/auth/OS-FEDERATION/identity_providers/<%= scope['keystone::federation::openidc::idp_name']-%>/protocols/openid/websso"
   OIDCRedirectURI "<%= @keystone_endpoint-%>/v3/auth/OS-FEDERATION/websso"
 
-  <LocationMatch "/v3/auth/OS-FEDERATION/websso/openid">
+  <LocationMatch "/v3/auth/OS-FEDERATION/websso">
       AuthType "openid-connect"
       Require valid-user
   </LocationMatch>
-- 
2.18.0.rc2

