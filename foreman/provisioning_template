<%#
name: KZNStack provision
snippet: false
model: ProvisioningTemplate
kind: provision
oses:
- CentOS
- RHEL
%>
<%#
This template accepts the following parameters:
- lang: string (default="en_US.UTF-8")
- selinux-mode: string (default="enforcing")
- keyboard: string (default="us")
- time-zone: string (default="UTC")
- http-proxy: string (default="")
- http-proxy-port: string (default="")
- force-puppet: boolean (default=false)
- enable-epel: boolean (default=true)
- enable-puppetlabs-repo: boolean (default=false)
- enable-puppetlabs-pc1-repo: boolean (default=false)
- enable-puppetlabs-puppet5-repo: boolean (default=false)
- ntp-server: string (default="0.fedora.pool.ntp.org")
- bootloader-append: string (default="nofb quiet splash=quiet")
- disable-firewall: boolean (default=false)
- package_upgrade: boolean (default=true)
- disable-uek: boolean (default=false)
%>
<%
  rhel_compatible = @host.operatingsystem.family == 'Redhat' && @host.operatingsystem.name != 'Fedora'
  os_major = @host.operatingsystem.major.to_i
  realm_compatible = (@host.operatingsystem.name == 'Fedora' && os_major >= 20) || (rhel_compatible && os_major >= 7)
  # safemode renderer does not support unary negation
  pm_set = @host.puppetmaster.empty? ? false : true
  proxy_uri = host_param('http-proxy') ? "http://#{host_param('http-proxy')}:#{host_param('http-proxy-port')}" : nil
  proxy_string = proxy_uri ? " --proxy=#{proxy_uri}" : ''
  puppet_enabled = pm_set || host_param_true?('force-puppet')
  section_end = (rhel_compatible && os_major <= 5) ? '' : '%end'
%>
<% if @host.operatingsystem.name != 'Fedora' || os_major < 29 -%>
install
<% end -%>
<% if host_param('kickstart_liveimg') %>
liveimg --url=<%= host_param('kickstart_liveimg') %> <%= proxy_string %>
<% else %>
<%= @mediapath %><%= proxy_string %>
<% end %>
lang <%= host_param('lang') || 'en_US.UTF-8' %>
selinux --<%= host_param('selinux-mode') || host_param('selinux') || 'enforcing' %>
keyboard <%= host_param('keyboard') || 'us' %>
skipx

<% subnet = @host.subnet -%>
<% if subnet.respond_to?(:dhcp_boot_mode?) -%>
<% dhcp = subnet.dhcp_boot_mode? && !@static -%>
<% else -%>
<% dhcp = !@static -%>
<% end -%>

network --bootproto <%= dhcp ? 'dhcp' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select{ |item| item.present? }.join(',')} --mtu=#{subnet.mtu.to_s}" %> --hostname <%= @host %><%= os_major >= 6 ? " --device=#{@host.mac}" : '' -%>

rootpw --iscrypted <%= root_pass %>
<% if host_param_true?('disable-firewall') -%>
firewall --disable
<% else -%>
firewall --<%= os_major >= 6 ? 'service=' : '' %>ssh
<% end -%>
<% if @host.operatingsystem.name == 'Fedora' && os_major >= 28 -%>
authselect --useshadow --passalgo=<%= @host.operatingsystem.password_hash.downcase || 'sha256' %> --kickstart
<% else -%>
authconfig --useshadow --passalgo=<%= @host.operatingsystem.password_hash.downcase || 'sha256' %> --kickstart
<% end -%>
timezone --utc <%= host_param('time-zone') || 'UTC' %>
<% if rhel_compatible -%>
services --disabled gpm,sendmail,cups,pcmcia,isdn,rawdevices,hpoj,bluetooth,openibd,avahi-daemon,avahi-dnsconfd,hidd,hplip,pcscd
<% end -%>

<% if realm_compatible && host_enc['parameters']['realm'] && @host.realm && @host.realm.realm_type == 'Active Directory' -%>
# One-time password will be requested at install time. Otherwise, $HOST[OTP] is used as a placeholder value.
realm join --one-time-password='<%= @host.otp || "$HOST[OTP]" %>' <%= @host.realm %>
<% end -%>

<% if @host.operatingsystem.name == 'Fedora' -%>
repo --name=fedora-everything --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-<%= @host.operatingsystem.major %>&arch=<%= @host.architecture %><%= proxy_string %>
<% end -%>

<% if @host.operatingsystem.name == 'OracleLinux' && os_major == 7 -%>
repo --name="Server-Mysql"
<% end -%>

<% if @host.operatingsystem.name == 'Fedora' && os_major <= 16 -%>
# Bootloader exception for Fedora 16:
bootloader --append="<%= host_param('bootloader-append') || 'nofb quiet splash=quiet' %> <%= ks_console %>" <%= @grub_pass %>
part biosboot --fstype=biosboot --size=1
<% else -%>
bootloader --location=mbr --append="<%= host_param('bootloader-append') || 'nofb quiet splash=quiet' %>" <%= @grub_pass %>
<% if os_major == 5 -%>
key --skip
<% end -%>
<% end -%>

<% if @dynamic -%>
%include /tmp/diskpart.cfg
<% else -%>
<%= @host.diskLayout %>
<% end -%>

text
<% if @host.respond_to?(:bootdisk_build?) && @host.bootdisk_build? %>
reboot --eject
<% else -%>
reboot
<% end -%>

%packages
yum
dhclient
ntp
deltarpm
mailx
mc
net-tools
ntp
smartmontools
vim
yum-utils
sos
@Core
<% if os_major >= 6 -%>
redhat-lsb-core
<% end -%>

<%= section_end -%>

<% if @dynamic -%>
%pre
<%= @host.diskLayout %>
<%= section_end -%>
<% end -%>

%post --nochroot --log /mnt/sysimage/root/install.postnochroot.log
cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
<%= section_end -%>

%post --log /root/ks-post-1.log
<% if subnet.respond_to?(:dhcp_boot_mode?) || @host.subnet6.respond_to?(:dhcp_boot_mode?) -%>
<%= snippet 'kickstart_networking_setup' %>
<% end -%>

mkdir -m 700 /root/.ssh 
cat <<EOF > /root/.ssh/authorized_keys
<%= host_param('ssh-keys') %>
EOF
chmod 600 /root/.ssh/authorized_keys

<% if proxy_uri -%>
# Yum proxy
echo 'proxy = <%= proxy_uri %>' >> /etc/yum.conf
<% end -%>

<%= snippet 'redhat_register' %>

<% if host_enc['parameters']['realm'] && @host.realm && @host.realm.realm_type == 'FreeIPA' -%>
<%= snippet 'freeipa_register' %>
<% end -%>

<%= snippet('remote_execution_ssh_keys') %>

<%= snippet "blacklist_kernel_modules" %>

<% if puppet_enabled %>
<% if host_param_true?('enable-puppetlabs-pc1-repo') || host_param_true?('enable-puppetlabs-repo') || host_param_true?('enable-puppetlabs-puppet5-repo') -%>
<%= snippet 'puppetlabs_repo' %>
<% end -%>
<%= snippet 'puppet_setup' %>
<% end -%>

<% if @host.operatingsystem.name == 'OracleLinux' && host_param_true?('disable-uek') -%>
# Uninstall the Oracle Unbreakable Kernel packages
yum -t -y remove kernel-uek*
sed -e 's/DEFAULTKERNEL=kernel-uek/DEFAULTKERNEL=kernel/g' -i /etc/sysconfig/kernel
<% end -%>

curl -sf http://mochat.massopen.cloud/repos/kznstack.repo -o /etc/yum.repos.d/kznstack.repo
yum -y -e0 localinstall https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum-config-manager --disable epel
yum -y -e0 --enablerepo=epel install ansible

sync
exit 0

<%= section_end -%>

%post --interpreter /usr/bin/ansible-playbook --log /root/ks-post-2.log
---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: remove firewalld
      package:
        name: firewalld
        state: absent

    - name: sync system clock
      command: >-
        /usr/sbin/ntpdate -sub
        <%= host_param('ntp-server') || '0.fedora.pool.ntp.org' %>

    - name: sync hardware clock
      command: >-
        /usr/sbin/hwclock --systohc

    - name: set sysctl values
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop:
        - name: fs.file-max
          value: 100000

    - name: configure limits.conf
      blockinfile:
        dest: /etc/security/limits.conf
        block: |
          *      soft nproc 10000
          *      hard nproc 10000
          *      soft nofile 10000
          *      hard nofile 10000

    - name: install local repository files
      get_url:
        url: http://mochat.massopen.cloud/repos/kznstack.repo
        dest: /etc/yum.repos.d/kznstack.repo

    - name: enable openstack repositories
      command: >-
        yum-config-manager --enable {{ item }}
      loop:
        - rhel-7-server-openstack-<%= host_param('rhel-osp-version') %>-rpms-local
        - rhel-7-server-openstack-<%= host_param('rhel-osp-version') %>-tools-rpms-local
        - rhel-7-server-openstack-<%= host_param('rhel-osp-version') %>-optools-rpms-local

    - name: update packages
      package:
        name: "*"
        state: latest

    - name: install packages
      package:
        name: "{{ packages }}"
        state: installed
      vars:
        packages:
          - net-snmp
          - yum-cron
          - lsof
          - mc
          - logwatch
          - net-tools
          - bind-utils
          - virt-what

    - name: detect virtualization
      command: virt-what
      register: virt_what

    - name: install ovirt-guest-agent if necessary
      package:
        name: ovirt-guest-agent
        state: installed
      when: '"ovirt" in virt_what.stdout'

    - name: blacklist nouveau driver
      copy:
        content: "blacklist nouveau"
        dest: /etc/modprobe.d/blacklist-nouveau.conf

    - name: rebuild initrd
      command: dracut -f

    - name: enable yum-cron
      service:
        name: yum-cron
        enabled: true

    - name: configure yum-cron
      lineinfile:
        path: /etc/yum/yum-cron.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - regexp: "^download_updates"
          line: "download_updates = yes"
        - regexp: "^apply_updates"
          line: "apply_updates = yes"
        - regexp: "^random_sleep"
          line: "random_sleep = 180"

    - name: configure sudo
      copy:
        dest: /etc/sudoers.d/wheel
        content: |
          %wheel ALL=(ALL) NOPASSWD: ALL
        owner: root
        group: root
        mode: 440

    - name: install snmp configuration
      get_url:
        url: http://config:mocconfig@mochat.massopen.cloud/config/kzn/snmpd.conf
        dest: /etc/snmp/snmpd.conf
        force: true

    - name: enable snmp
      service:
        name: snmpd
        enabled: true

    - name: update repository files
      cron:
        name: update kznstack repository configuration
        minute: 1
        hour: 23
        user: root
        job: >-
          curl -sf http://mochat.massopen.cloud/repos/kznstack.repo
          -o /tmp/kznstack.repo &> /dev/null &&
          /bin/mv /tmp/kznstack.repo /etc/yum.repos.d/

    - name: configure /etc/aliases
      lineinfile:
        path: /etc/aliases
        line: "root: rootmail@lists.massopen.cloud"
        regexp: "^root:"

    - name: rebuild alias database
      command: newaliases

    - name: disable ssh password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "PasswordAuthentication no"
        regexp: "^#?PasswordAuthentication"

    - name: configure name resolution
      lineinfile:
        path: /etc/resolv.conf
        regexp: "^options"
        line: "options timeout:1 attempts:1 rotate"

    - name: inform foreman that build is complete
      uri:
        url: <%= foreman_url('built') %>
        status_code:
          - 200
          - 201
<%= section_end -%>

# vim: set ft=yaml :
