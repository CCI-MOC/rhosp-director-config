---
heat_template_version: pike

description: >
  Configure federation resources in Keystone

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json

  KeystoneRegion:
      type: string
      default: 'regionOne'
      description: Keystone region for endpoint
  AdminPassword:
    description: The password for the keystone admin account, used for monitoring, querying neutron etc.
    type: string
    hidden: true

  KeystoneIdentityProviders:
    type: json
    default: {}

outputs:
  role_data:
    description: Role data for the ConfigureKeystoneFederation service
    value:
      service_name: configure-keystone-federation
      host_prep_tasks:
        - name: get list of identity providers
          set_fact:
            keystone_identity_providers: {get_param: KeystoneIdentityProviders}

        - name: get bootstrap nodeid
          command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
          register: bootstrap_node_cmd

        - set_fact:
            is_bootstrap_node: bootstrap_node_cmd.stdout|lower == ansible_hostname|lower

        - when: is_bootstrap_node
          block:
            - name: create temporary directory
              command: "mktemp -td federationXXXXXX"
              register: tempdir

            - name: get keystone admin password
              command: hiera -c /etc/puppet/hiera.yaml keystone::admin_password
              register: keystone_admin_password

            - name: get keystone internal endpoint
              command: hiera -c /etc/puppet/hiera.yaml keystone::endpoint::internal_url
              register: keystone_endpoint_internal

            - name: get keystone region
              command: hiera -c /etc/puppet/hiera.yaml keystone::endpoint::region
              register: keystone_region

            - name: write mapping rules to tempdir
              copy:
                dest: "{{ tempdir.stdout }}/rules-{{ item.key }}.json"
                content: "{{ item.value.rules|to_nice_json }}"
              with_dict: "{{ keystone_identity_providers }}"

            - file:
                path: /etc/openstack
                state: directory

            - copy:
                dest: /etc/openstack/clouds.yaml
                owner: root
                group: root
                mode: "0600"
                content: |-
                  clouds:
                    overcloud:
                      auth:
                        username: admin
                        project_name: admin
                        password: "{{ keystone_admin_password.stdout }}"
                        auth_url: "{{ keystone_endpoint_internal.stdout }}"
                      region: "{{ keystone_region.stdout }}"
                      identity_api_version: 3

            - name: check if identity providers exist
              command: >-
                openstack --os-cloud overcloud identity provider show {{ item.key }}
              ignore_errors: true
              with_dict: "{{ keystone_identity_providers }}"
              register: providers

            - name: create identity providers
              command: >-
                openstack --os-cloud overcloud identity provider create
                --remote-id {{ item.item.value.remote_id }} {{ item.item.key }}
              when: item|failed
              with_items: "{{ providers.results }}"
              
            - name: check if mapping exists
              command: >-
                openstack --os-cloud overcloud mapping show {{ item.key }}-mapping
              ignore_errors: true
              with_dict: "{{ keystone_identity_providers }}"
              register: mappings

            - name: create mapping
              command: >-
                openstack --os-cloud overcloud mapping create
                --rules "{{ tempdir }}/rules-{{ item.item.key }}.json"
                {{ item.item.key }}-mapping
              when: item|failed
              with_items: "{{ mappings.results }}"

            - name: check if federation protocol exists
              command: >-
                openstack --os-cloud overcloud federation protocol show
                --identity-provider {{ item.key }} {{ item.value.protocol }}
              ignore_errors: true
              with_dict: "{{ keystone_identity_providers }}"
              register: protocols

            - name: create federation protocol
              command: >-
                openstack federation protocol create {{ item.item.value.protocol }}
                --mapping {{ item.item.key }}-mapping
                --identity-provider {{ item.item.key }}
              when: item|failed
              with_items: "{{ protocols.results }}"
          always:
            - file:
                path: "{{ tempdir.stdout }}"
                state: absent
              ignore_errors: true
