---
heat_template_version: pike

description: >
  Deploy patched puppet modules.

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json

  PuppetModuleUrls:
    type: comma_delimited_list
    default: []

outputs:
  role_data:
    description: Role data for the PatchPuppetModules service.
    value:
      service_name: patch-puppet-modules
      host_prep_tasks:
        - set_fact:
            puppet_module_urls: {get_param: PuppetModuleUrls}

        - name: 'create temporary directory'
          command: "mktemp -td puppetXXXXXX"
          register: tempdir_cmd

        - name: 'set tempdir fact'
          set_fact:
            tempdir: "{{ tempdir_cmd.stdout }}"

        - block:
            - name: create directories
              file:
                path: "{{ tempdir }}/{{ item }}"
                state: directory
              loop:
                - incoming
                - unpacked

            - name: download puppet modules
              get_url:
                url: "{{ item.1 }}"
                dest: "{{ tempdir }}/incoming/archive-{{ item.0 }}.tar.gz"
              with_indexed_items: "{{ puppet_module_urls }}"
              register: puppet_module_archives

            - name: unpack puppet modules
              unarchive:
                src: "{{ item.dest }}"
                dest: "{{ tempdir }}/unpacked"
              with_items: "{{ puppet_module_archives.results }}"

            - name: get list of puppet modules
              command: ls
              args:
                chdir: "{{ tempdir }}/unpacked"
              register: puppet_modules

            - name: remove existing puppet modules
              file:
                path: "/usr/share/openstack-puppet/modules/{{item}}"
                state: absent
              loop: "{{ puppet_modules.stdout_lines|default([]) }}"

            - name: install replacement modules
              command: >-
                cp -a {{ item }}
                /usr/share/openstack-puppet/modules/
              args:
                chdir: "{{ tempdir }}/unpacked"
              loop: "{{ puppet_modules.stdout_lines|default([]) }}"
          always:
            - name: 'clean up temporary directory'
              file:
                path: "{{ tempdir }}"
                state: absent
