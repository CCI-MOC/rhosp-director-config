---
heat_template_version: pike

parameters:
  servers:
    type: json
  FloatingNetworkVlanID:
    type: string
  KeystoneIdentityProviders:
    type: json
    default: {}

resources:
  FinishNetworkConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
            #!/bin/sh
            iface=vlan@VLANID@

            # if the target interface does not exist, exit
            # with no changes
            if ! ip addr show $iface; then
              exit 0
            fi

            # if br-ex does not exist, exit with no changes
            if ! ovs-vsctl list-ports br-ex; then
              exit 0
            fi

            # if the interface has already been added to the bridge,
            # exit with no changes
            if ovs-vsctl list-ports br-ex | grep -q $iface; then
              exit 0
            fi

            # add the target interface to the bridge
            ovs-vsctl add-port br-ex $iface
          params:
            "@VLANID@": {get_param: FloatingNetworkVlanID}

  FinishNetworkDeployments:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers: {get_param: servers}
      config: {get_resource: FinishNetworkConfig}
      actions: ['CREATE']

  # Create /etc/openstack/clouds.yaml on all controllers.  You can
  # use this to provide authentication information to the 'openstack'
  # cli (as in 'openstack --os-cloud overcloud ...').
  CreateCloudYamlConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        - hosts: localhost
          connection: local
          tasks:
            # In order to identify whether or not we're running on a
            # controller, we look at the list of active service names.
            - name: get service names
              command: hiera -c /etc/puppet/hiera.yaml service_names
              register: service_names

            - set_fact:
                has_keystone: >-
                  {{ 'keystone' in service_names.stdout|from_json }}

            - when: has_keystone
              block:
                - name: get keystone admin password
                  command: >-
                    hiera -c /etc/puppet/hiera.yaml
                    keystone::admin_password
                  register: keystone_admin_password

                - name: get keystone internal endpoint
                  command: >-
                    hiera -c /etc/puppet/hiera.yaml
                    keystone::endpoint::internal_url
                  register: keystone_endpoint_internal

                - name: get keystone region
                  command: hiera -c /etc/puppet/hiera.yaml keystone::endpoint::region
                  register: keystone_region

                - file:
                    path: /etc/openstack
                    state: directory
                    owner: root
                    group: root
                    mode: 0700

                - copy:
                    dest: /etc/openstack/clouds.yaml
                    owner: root
                    group: root
                    mode: "0600"
                    content: |-
                      clouds:
                        overcloud:
                          auth:
                            username: admin
                            project_name: admin
                            password: "{{ keystone_admin_password.stdout }}"
                            auth_url: "{{ keystone_endpoint_internal.stdout }}"
                          region: "{{ keystone_region.stdout }}"
                          identity_api_version: 3

  CreateCloudYamlDeployments:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      servers: {get_param: servers}
      config: {get_resource: CreateCloudYamlConfig}

  KeystoneFederationConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: keystone_identity_providers
      config: |
        - hosts: localhost
          connection: local
          tasks:
            # We want this script to run once on one of the
            # controllers. We first check to see if we're running on
            # the bootstrap node, but this is only unique per role
            # (so, e.g., there will be a bootstrap node for the
            # compute services as well).
            - name: get bootstrap nodeid
              command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
              register: bootstrap_node

            # In order to identify whether or not we're running on a
            # controller, we look at the list of active service names.
            - name: get service names
              command: hiera -c /etc/puppet/hiera.yaml service_names
              register: service_names

            - set_fact:
                is_bootstrap_node: >-
                  {{ bootstrap_node.stdout|lower == ansible_hostname|lower }}
                has_keystone: >-
                  {{ 'keystone' in service_names.stdout|from_json }}

            # We only run the remainder of this playbook if this is a
            # bootstrap node *and* it is running keystone.
            - when: is_bootstrap_node and has_keystone
              block:
                - name: create temporary directory
                  command: "mktemp -td federationXXXXXX"
                  register: tempdir

                - name: write mapping rules to tempdir
                  copy:
                    dest: "{{ tempdir.stdout }}/rules-{{ item.key }}.json"
                    content: "{{ item.value.rules|to_nice_json }}"
                  with_dict: "{{ keystone_identity_providers }}"

                - name: check if identity providers exist
                  command: >-
                    openstack --os-cloud overcloud identity provider show {{ item.key }}
                  ignore_errors: true
                  with_dict: "{{ keystone_identity_providers }}"
                  register: providers

                - name: create identity providers
                  command: >-
                    openstack --os-cloud overcloud identity provider create
                    --remote-id {{ item.item.value.remote_id }} {{ item.item.key }}
                  when: item is failed
                  with_items: "{{ providers.results }}"
                  
                - name: check if mapping exists
                  command: >-
                    openstack --os-cloud overcloud mapping show {{ item.key }}-mapping
                  ignore_errors: true
                  with_dict: "{{ keystone_identity_providers }}"
                  register: mappings

                - name: create mapping
                  command: >-
                    openstack --os-cloud overcloud mapping create
                    --rules "{{ tempdir.stdout }}/rules-{{ item.item.key }}.json"
                    {{ item.item.key }}-mapping
                  when: item is failed
                  with_items: "{{ mappings.results }}"

                - name: check if federation protocol exists
                  command: >-
                    openstack --os-cloud overcloud federation protocol show
                    --identity-provider {{ item.key }} {{ item.value.protocol }}
                  ignore_errors: true
                  with_dict: "{{ keystone_identity_providers }}"
                  register: protocols

                - name: create federation protocol
                  command: >-
                    openstack --os-cloud overcloud federation protocol
                    create {{ item.item.value.protocol }}
                    --mapping {{ item.item.key }}-mapping
                    --identity-provider {{ item.item.key }}
                  when: item is failed
                  with_items: "{{ protocols.results }}"
              always:
                - file:
                    path: "{{ tempdir.stdout }}"
                    state: absent
                  ignore_errors: true

  KeystoneFederationDeployments:
    type: OS::Heat::SoftwareDeploymentGroup
    depends_on: CreateCloudYamlDeployments
    properties:
      servers: {get_param: servers}
      config: {get_resource: KeystoneFederationConfig}
      input_values:
        keystone_identity_providers: {get_param: KeystoneIdentityProviders}
